__author__ = 'frank'

from attrdict import AttrDict
import json
import requests


def process_request(api_key, partner_id, uri, method, data=None):
    """
    API request processor handling supported API methods and error messages returned from API. Refer to the Netki
    Apiary documentation for additional information. http://docs.netki.apiary.io/

    :param api_key: api_key from Netki class init
    :param partner_id: partner_id from Netki class init
    :param uri: api_url from Netki class init
    :param method: Request method
    :param data: PUT / POST data
    :return: AttrDict for valid, non-error responses. Empty dict for 204 responses.
    """

    if method not in ['GET', 'POST', 'PUT', 'DELETE']:
        raise Exception('Unsupported HTTP method: %s' % method)

    headers = {
        'Content-Type': 'application/json',
        'Authorization': api_key,
        'X-Partner-ID': partner_id
    }

    response = requests.request(method=method, url=uri, headers=headers, data=data)

    if method == 'DELETE' and response.status_code == 204:
        return {}

    rdata = AttrDict(response.json())

    if response.status_code >= 300 or not rdata.success:
        error_message = rdata.message

        if 'failures' in rdata:
            error_message += ' [FAILURES: '
            failures = []
            for failure in rdata.failures:
                failures.append(failure.message)

            error_message = error_message + ', '.join(failures) + ']'

        raise Exception(error_message)

    return rdata


class WalletName:
    """
    WalletName object definition and utility methods including save and delete

    :param id: Remote unique identifier for a specific Wallet Name. This should not be set but instead retrieved
    with Netki.get_wallet_names()
    :param domain_name: Domain name to which this Wallet Name belongs. ``partnerdomain.com``
    :param name: Customer's Wallet Name appended to domain_name. ``joe``
    :param wallets: Dictionary of wallets['currency']: wallet_address. ``wallets['btc']: '1CpLXM15vjULK3ZPGUTDMUcGATGR9xGitv'``
    :param external_id: Your unique customer identifier for this user's Wallet Name.
    :return: WalletName object
    """

    def __init__(self, id=None, domain_name='', name='', wallets={}, external_id=None):

        self.id = id
        self.domain_name = domain_name
        self.name = name
        self.wallets = wallets
        self.external_id = external_id

    def set_api_opts(self, api_url, api_key, partner_id):
        """
        Add values required for saving and deleting a WalletName object via the API. This is for internal use.

        :param api_url: API URL from Netki class init
        :param api_key: API key from Netki class init
        :param partner_id: Partner ID from Netki class init
        """

        self.api_url = api_url
        self.api_key = api_key
        self.partner_id = partner_id

    def get_used_currencies(self):
        """
        Returns wallets dictionary containing currencies and wallet addresses.
        ``wallets['currency']: 'wallet_address'``
        """
        return self.wallets

    def get_wallet_address(self, currency):
        """ Returns the wallet address for a provided currency. """
        return self.wallets[currency]

    def set_currency_address(self, currency, wallet_address):
        """
        Create or update a currency and wallet address.

        :param currency: Three letter currency identifier per Netki API documentation. ``btc, ltc, oap``
        :param wallet_address: wallet address for provided currency
        """
        self.wallets[currency] = wallet_address

    def remove_currency_address(self, currency):
        """ Remove a currency including the associated wallet address. """
        if self.wallets[currency]:
            del self.wallets[currency]

    def save(self):
        """
        Commit changes to a WalletName object, submitting them to the API. For new Wallet Names, an id will
        automatically be generated by the server. Run Netki.create_wallet_name() to create a new WalletName object,
        then run save() on your WalletName object to submit it to the API. To update a Wallet Name, run
        Netki.get_wallet_names() to retrieve the Wallet Name object, make your updates, then run save() on the
        WalletName object to commit changes to the API.
        """

        wallet_data = []

        for k in self.wallets.keys():
            wallet_data.append({
                'currency': k,
                'wallet_address': self.wallets[k]
            })

        wallet_name_data = {
            'domain_name': self.domain_name,
            'name': self.name,
            'wallets': wallet_data,
            'external_id': self.external_id
        }

        wn_api_data = {'wallet_names': [wallet_name_data]}

        # If an ID is present it exists in Netki's systems, therefore submit an update
        if self.id:
            wallet_name_data['id'] = self.id
            response = process_request(
                self.api_key,
                self.partner_id,
                self.api_url + '/v1/partner/walletname',
                'PUT',
                json.dumps(wn_api_data)
            )
        else:
            response = process_request(
                self.api_key,
                self.partner_id,
                self.api_url + '/v1/partner/walletname',
                'POST',
                json.dumps(wn_api_data)
            )

        for wn in response.wallet_names:
            if wn.domain_name == self.domain_name and wn.name == self.name:
                self.id = wn.id

    def delete(self):
        """
        To delete a WalletName object, first run Netki.get_wallet_names() to retrieve the Wallet Name from the API,
        then run delete() on the WalletName object to delete it from Netki systems.
        """

        if not self.id:
            raise Exception('Unable to Delete Object that Does Not Exist Remotely')

        wn_api_data = {
            'wallet_names': [
                {
                    'domain_name': self.domain_name,
                    'id': self.id
                }
            ]
        }

        process_request(
            self.api_key,
            self.partner_id,
            self.api_url + '/v1/partner/walletname',
            'DELETE',
            json.dumps(wn_api_data)
        )


class Netki:
    """
    General methods for interacting with Netki's Partner API.

    :param partner_id: Your Partner ID available in the API Keys section of your My Account page.
    :param api_key: API Key available in the API Key section of your My Account page.
    :param api_url: https://api.netki.com unless otherwise noted
    """

    def __init__(self, partner_id=None, api_key=None, api_url='https://api.netki.com'):

        self.partner_id = partner_id
        self.api_key = api_key
        self.api_url = api_url

    def get_wallet_names(self, domain_name=None, external_id=None):
        """
        Wallet Name Operation

        Retrieve Wallet Names from the Netki API. Four options are available for retrieval:

        * Retrieve all Wallet Names associated with your partner_id by not specifying a domain_name or external_id.
        * Retrieve all Wallet Names associated with a particular partner domain_name by specifying a domain_name.
        * Retrieve all Wallet Names associated with a particular external_id by specifying an external_id.
        * Retrieve all Wallet Names associated with a domain_name and external_id by specifying both domain_name
        and external_id.

        :param domain_name: Domain name to which the requested Wallet Names belong. ``partnerdomain.com``
        :param external_id: Your unique customer identifier specified when creating a Wallet Name.
        :return: List of Wallet Names retrieved based on the provided criteria.
        """

        args = []
        if domain_name:
            args.append('domain_name=%s' % domain_name)

        if external_id:
            args.append('external_id=%s' % external_id)

        uri = self.api_url + '/v1/partner/walletname'

        if args:
            uri = uri + '?' + '&'.join(args)

        response = process_request(self.api_key, self.partner_id, uri, 'GET')

        if not response.wallet_name_count:
            return []

        # Assemble and return a list of Wallet Name objects from the response data
        all_wallet_names = []
        for wn in response.wallet_names:
            wallet_name = WalletName()
            wallet_name.id = wn.id
            wallet_name.domain_name = wn.domain_name
            wallet_name.name = wn.name
            wallet_name.external_id = wn.external_id
            wallet_name.wallets = {}

            for wallet in wn.wallets:
                wallet_name.wallets[wallet.currency] = wallet.wallet_address

            wallet_name.set_api_opts(self.api_url, self.api_key, self.partner_id)

            all_wallet_names.append(wallet_name)

        return all_wallet_names

    def create_wallet_name(self, domain_name, name, wallets={}, external_id=None):
        """
        Wallet Name Operation

        Create a new WalletName object with the required data. Execute save() to commit your changes to the API.

        :param domain_name: Domain name to which the requested Wallet Name's belong. ``partnerdomain.com``
        :param name: Customers Wallet Name appended to domain_name. ``joe``
        :param wallets: Dictionary of wallets['currency']: wallet_address. ``wallets['btc']: '1CpLXM15vjULK3ZPGUTDMUcGATGR9xGitv'``
        :param external_id: Your unique customer identifier for this users Wallet Name.
        :return: WalletName object
        """
        wallet_name = WalletName()
        wallet_name.domain_name = domain_name
        wallet_name.name = name
        wallet_name.wallets = wallets
        wallet_name.external_id = external_id
        wallet_name.set_api_opts(self.api_url, self.api_key, self.partner_id)

        return wallet_name

    # Partner Operations #
    def create_partner(self, partner_name):
        """
        Sub-partner Operation

        Create a sub-partner.

        :param partner_name: Partner Name
        :return: AttrDict with created partner_name and partner_id ``partner.name and partner.id``
        """

        response = process_request(self.api_key, self.partner_id, self.api_url + '/v1/admin/partner/' + partner_name, 'POST')
        return response.partner

    def get_partners(self):
        """
        Sub-partner Operation

        Get all partners (partner and sub-partners) associated with your account.

        :return: AttrDict with a list of partners ``partners[i].id and partners[i].name``
        """

        return process_request(self.api_key, self.partner_id, self.api_url + '/v1/admin/partner', 'GET')

    def delete_partner(self, partner_name):
        """
        Sub-partner Operation

        Delete submitted partner_name
        """

        process_request(self.api_key, self.partner_id, self.api_url + '/v1/admin/partner/' + partner_name, 'DELETE')

    # Domain Operations #
    # sub_partner_id is only required when creating a domain name if the domain is for a sub-partner that you manage
    def create_partner_domain(self, domain_name, sub_partner_id=None):
        """
        Domain Operation

        Create a partner domain used to offer Wallet Names.

        :param domain_name: ``partnerdomain.com``
        :param (Optional) sub_partner_id: When provided, create a domain_name under the sub_partner_id that you are
            managing.
        :return: AttrDict with status and information required to complete domain setup.
        """

        post_data = {}

        if sub_partner_id:
            post_data['partner_id'] = sub_partner_id

        return process_request(self.api_key, self.partner_id, self.api_url + '/v1/partner/domain/' + domain_name, 'POST', json.dumps(post_data))

    def get_domains(self):
        """
        Domain Operation

        Retrieve all domains associated with your partner_id

        :return: AttrDict with domains list. ``domains[i].tld_type and domains[i].domain_name``
        """

        return process_request(self.api_key, self.partner_id, self.api_url + '/api/domain', 'GET')

    def get_domain_status(self, domain_name):
        """
        Domain Operation

        Retrieve the setup status of the submitted domain_name. This provides information on DNS delegation and
        DNSSEC status.

        :param domain_name: ``partnerdomain.com``
        :return: AttrDict with domain setup status information.
        """

        return process_request(self.api_key, self.partner_id, self.api_url + '/v1/partner/domain/' + domain_name, 'GET')

    def get_domain_dnssec_details(self, domain_name):
        """
        Domain Operation

        Retrieve information necessary for setting up DNSSEC.

        :param domain_name: ``partnerdomain.com``
        :return: AttrDict with DNSSEC configuration parameters
        """

        return process_request(self.api_key, self.partner_id, self.api_url + '/v1/partner/domain/dnssec/' + domain_name, 'GET')

    def delete_partner_domain(self, domain_name):
        """
        Domain Operation

        Delete the provided partner domain
        """

        process_request(self.api_key, self.partner_id, self.api_url + '/v1/partner/domain/' + domain_name, 'DELETE')
